on:
  # Test on PRs for any branch
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - master


# NOTE: Should we use fail-fast: false?

name: Tests

jobs:
  test:
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
          - 1.51.0 # MSRV
        os: 
          - ubuntu-latest
          - macos-latest
          - windows-latest
    
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      
      - name: Test debug-mode, default features
        uses: actions-rs/cargo@v1
        with:
          command: test

      - name: Test debug-mode, all features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --features serde
      
      - name: Test debug-mode, no default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --tests
      
      - name: Test debug-mode, alloc feature
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --no-default-features --features alloc --tests
      
      - name: Test release-mode, default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release

      - name: Test release-mode, all features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --features serde
      
      - name: Test release-mode, no default features
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --no-default-features --tests
      
      - name: Test release-mode, alloc feature
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release --no-default-features --features alloc --tests


  sanitizers:
    name:  Tests w. sanitizers
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-unknown-linux-gnu
          override: true
      
      # Release (LeakSanitizer is enabled by default with AddressSanitizer for x86_64 Linux builds)
      # https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
      - run: RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --all-features --tests --release --target x86_64-unknown-linux-gnu
      - run: RUSTFLAGS="-Z sanitizer=address" ASAN_OPTIONS="detect_odr_violation=0" cargo test --no-default-features --tests --release --target x86_64-unknown-linux-gnu
        
  no_std:
    name: no_std build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - nightly
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        target: thumbv7em-none-eabi
        override: true
    - uses: actions-rs/cargo@v1
      with:
        use-cross: true
        command: build
        args: --release --no-default-features --target thumbv7em-none-eabi

  cross_compilation:
    name: Linux/ARM - Release tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - i686-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - mips64-unknown-linux-gnuabi64
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.arch }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: test
          args: --release --target ${{ matrix.arch }}
    

  # https://rustwasm.github.io/docs/book/reference/add-wasm-support-to-crate.html#maintaining-ongoing-support-for-webassembly
  web_assembly:
    name: WebAssembly - Release build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.arch }}
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --no-default-features --target ${{ matrix.arch }}
  
  docs:
    name: Build documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all-features
  
  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
    - uses: actions/checkout@v2
    - uses: EmbarkStudios/cargo-deny-action@v1
      with:
        command: check ${{ matrix.checks }}
